391. Perfect Rectangle
Hard

233

49

Favorite

Share
Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region.

Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).


Example 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

Return true. All 5 rectangles together form an exact cover of a rectangular region.
 

 

Example 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

Return false. Because there is a gap between the two rectangular regions.
 

 

Example 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

Return false. Because there is a gap in the top center.
 

 

Example 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

Return false. Because two of the rectangles overlap with each other.
 

Accepted

class Solution:
    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:
        top_x, bottom_x=float('inf'),float('-inf')
        top_y,bottom_y=float('inf'),float('-inf')
        results=0
        myset=set()
        for r in rectangles:
            top_x=min(top_x,r[0])
            bottom_x=max(bottom_x,r[2])
            top_y=min(top_y,r[1])
            bottom_y=max(bottom_y,r[3])
            results+=((r[2]-r[0])*(r[3]-r[1]))
            
            p1=str(r[0])+'%'+str(r[1])
            p2=str(r[0])+'%'+str(r[3])
            p3=str(r[1])+'%'+str(r[1])
            p4=str(r[1])+'%'+str(r[3])
            
            if myset.add(p1)==False: myset.remove(p1)
            if myset.add(p2)==False: myset.remove(p2)
            if myset.add(p3)==False: myset.remove(p3)
            if myset.add(p4)==False: myset.remove(p4)
                
        area=(bottom_x-top_x)*(bottom_y-top_y)
         
        p1=str(top_x)+'%'+str(bottom_y)
        p2=str(top_x)+'%'+str(top_y)
        p3=str(bottom_x)+'%'+str(bottom_y)
        p4=str(bottom_x)+'%'+str(top_y)
            
        if results==area and len(myset)==4 and \
        p1 in myset and p2 in myset and p3 in myset \
        and p4 in myset:
            return True
        else:
            return False

                
            
